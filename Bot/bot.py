"""–ú–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º–∏ –§–°–ü.

–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
- Telegram Bot API (python-telegram-bot)
- PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (asyncio)
"""

import re
import asyncio
import asyncpg
from telegram import ReplyKeyboardMarkup, Update, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "database": "sbp",
    "user": "postgres",
    "password": "12345678",
    "host": "127.0.0.1",
    "port": "5432"
}



QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5, QUESTION_6 = range(6)

async def find_competitions_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ - –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"""
    context.user_data['answers'] = {}
    
    keyboard = [
        ["üßë‚Äçüíª –ü—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "üõ°Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"],
        ["ü§ñ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏", "üß† –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–µ"],
        ["‚úàÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ê–°"]
    ]
    await update.message.reply_text(
        "üèÜ –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è!\n"
        "–ö–∞–∫–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return QUESTION_1

async def handle_question_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    context.user_data['answers']['discipline'] = update.message.text
    
    keyboard = [["üíª –û–Ω–ª–∞–π–Ω", "üèüÔ∏è –û—Ñ–ª–∞–π–Ω", "‚ú® –í—Å–µ"]]
    await update.message.reply_text(
        "–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω —É—á–∞—Å—Ç–∏–µ?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return QUESTION_2

async def handle_question_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    context.user_data['answers']['format'] = re.sub(r'[^\w\s]', '', update.message.text).strip()
    
    keyboard = [["üìç –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ", "üá∑üá∫ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–± —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return QUESTION_3

async def handle_question_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    context.user_data['answers']['scale'] = re.sub(r'[^\w\s]', '', update.message.text).strip()
    
    # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤–æ–∑—Ä–∞—Å—Ç–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±–æ—Ä–∞
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=ReplyKeyboardRemove()
    )
    return QUESTION_4

async def handle_question_4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ"""
    try:
        age = int(update.message.text)
        if age < 10 or age > 100:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç):")
            return QUESTION_4
        context.user_data['answers']['age'] = age
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç):")
        return QUESTION_4
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    keyboard = [["üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ", "üë• –ö–æ–º–∞–Ω–¥–Ω—ã–µ"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return QUESTION_5  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É

async def handle_question_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
    context.user_data['answers']['type'] = re.sub(r'[^\w\s]', '', update.message.text).strip()
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω
    if context.user_data['answers'].get('scale') == "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ":
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ, –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞:")
        return QUESTION_6
    
    # –ò–Ω–∞—á–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
    return await finish_questionnaire(update, context)

async def handle_question_6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ä–µ–≥–∏–æ–Ω–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö)"""
    region = update.message.text
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        reg_ = await conn.fetch(
            "SELECT * FROM win_region WHERE name = $1", 
            region
        )
        print(reg_)
        if reg_:
            context.user_data['answers']['region'] = update.message.text
            return await finish_questionnaire(update, context)
        else:
            await update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω):")
            return QUESTION_6
    finally:
        await conn.close()
    

async def finish_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    answers = context.user_data['answers']
    discipline = re.sub(r'[^\w\s]', '', answers['discipline']).strip()
    format = answers['format']
    if format == '–û–Ω–ª–∞–π–Ω':
        format = "('online')"
    elif format == '–û—Ñ–ª–∞–π–Ω':
        format = "('offline')"
    else:
        format = "('online','offline')"
    scale = answers['scale']
    age = int(answers['age'])
    type_ = answers['type']
    if type_ == '–ö–æ–º–∞–Ω–¥–Ω—ã–µ':
        type_='team'
    else:
        type_='individual'
    report = (
        "üìã\n"
        f"‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {answers.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç: {answers.get('format', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚Ä¢ –ú–∞—Å—à—Ç–∞–±: {answers.get('scale', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {answers.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚Ä¢ –¢–∏–ø —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π: {answers.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )
    
    if 'region' in answers:
        report += f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {answers['region']}\n"
    
    keyboard = [
        ["üìÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", "üèÜ –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üìå –û –±–æ—Ç–µ"],
    ]
    await update.message.reply_text(
        f"{report}\n\n–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    print(discipline,format,int(age),type_)
    print('–≥—Ä—É–∂—É')
    conn = await asyncpg.connect(**DB_CONFIG)
    print('–∑–∞–≥—Ä—É–∑–∏–ª')
    print(discipline)
    try:
        if 'region' in answers:
            region = answers['region']
            search_comp = await conn.fetch(
            f'''
with comp as
(SELECT wc.id,
wc.max_participants, wc.max_participants_in_team,
wc.min_age, wc.max_age, wc."name", wc.competition_type,
wc.status, wc.description, wc."type", wc.permissions, wd."name" AS discipline,
win_competitiondate.start_date, win_competitiondate.end_date,
win_competitiondate.registration_start, win_competitiondate.registration_end
FROM win_competition wc
LEFT JOIN win_discipline wd
ON wc.discipline_id = wd.id
LEFT JOIN win_competitiondate
ON wc.id = win_competitiondate.competition_id)   
SELECT 
c.max_participants, c.max_participants_in_team,
c.min_age, c.max_age, c.name, c.competition_type,
c.status, c.description, c."type", c.discipline,
c.start_date, c.end_date, c.registration_start, c.registration_end
FROM comp c
WHERE c.permissions @> to_jsonb((select id from win_region where "name" = $1)) and c.discipline = $2 and c.competition_type IN {format} and c.min_age<=$3 and c.type = $4; 
        ''', 
            region, discipline, age, type_
            )
            if len(search_comp)!=0:
                for competition in search_comp:
                    print(type(competition['start_date']))
                    start_date = competition['start_date'].strftime("%d.%m.%Y %H:%M")
                    end_date = competition['end_date'].strftime("%d.%m.%Y %H:%M")
                    registration_start = competition['registration_start'].strftime("%d.%m.%Y %H:%M")
                    registration_end = competition['registration_end'].strftime("%d.%m.%Y %H:%M")
                    message = f'''üî• <b>{competition['name']}</b> (<i>{competition['description']}</i>)\n
üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {start_date} - {end_date}
‚è≥ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {registration_start} - {registration_end}
                    '''
                    if type_ == 'team':
                        message += f'''
\nüë• <b>–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:</b> {competition["max_participants_in_team"]} —á–µ–ª–æ–≤–µ–∫'''
                    message += '''
\n\nüîó –ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ <a href="https://www.codedepartament.ru">—Å–∞–π—Ç</a> –∏ –ø—Ä–∏–Ω–∏–º–∞–π —É—á–∞—Å—Ç–∏–µ!'''
                    await update.message.reply_text(message,reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),parse_mode='HTML')
            else:
                await update.message.reply_text('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.',reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        else:
            print(format)
            search_comp = await conn.fetch(
            f'''
with comp as
(SELECT wc.id,
wc.max_participants, wc.max_participants_in_team,
wc.min_age, wc.max_age, wc."name", wc.competition_type,
wc.status, wc.description, wc."type", wc.permissions, wd."name" AS discipline,
win_competitiondate.start_date, win_competitiondate.end_date,
win_competitiondate.registration_start, win_competitiondate.registration_end
FROM win_competition wc
LEFT JOIN win_discipline wd
ON wc.discipline_id = wd.id
LEFT JOIN win_competitiondate
ON wc.id = win_competitiondate.competition_id)
SELECT 
c.max_participants, c.max_participants_in_team,
c.min_age, c.max_age, c.name, c.competition_type,
c.status, c.description, c."type", c.discipline, c.permissions,
c.start_date, c.end_date, c.registration_start, c.registration_end,
jsonb_array_length(c.permissions) as count_reg
FROM comp c
WHERE 
jsonb_array_length(c.permissions) in (0,89)
AND c.discipline = $1 
AND c.competition_type IN {format} 
AND c.min_age <= $2 
AND c.type = $3; 
            ''', 
            discipline, age, type_
            )
            if len(search_comp)!=0:
                for competition in search_comp:
                    start_date = competition['start_date'].strftime("%d.%m.%Y %H:%M")
                    end_date = competition['end_date'].strftime("%d.%m.%Y %H:%M")
                    registration_start = competition['registration_start'].strftime("%d.%m.%Y %H:%M")
                    registration_end = competition['registration_end'].strftime("%d.%m.%Y %H:%M")
                    message = f'''üî• <b>{competition['name']}</b> (<i>{competition['description']}</i>)\n
üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {start_date} - {end_date}
‚è≥ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {registration_start} - {registration_end}\n'''
                    if type_ == 'team':
                        message += f'''
üë• <b>–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:</b> {competition["max_participants_in_team"]} —á–µ–ª–æ–≤–µ–∫'''
                    if competition['count_reg'] == 0:
                        message += f'''
\n‚ÄºÔ∏è<b>–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é.</b>'''
                    message += '\n\nüîó –ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ <a href="https://www.codedepartament.ru">—Å–∞–π—Ç</a> –∏ –ø—Ä–∏–Ω–∏–º–∞–π —É—á–∞—Å—Ç–∏–µ!'
                    await update.message.reply_text(message,reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),parse_mode='HTML')
            else:
                await update.message.reply_text('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.',reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    finally:
        await conn.close()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø—Ä–æ—Å–∞"""
    keyboard = [
        ["üìÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", "üèÜ –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üìå –û –±–æ—Ç–µ"],
    ]
    await update.message.reply_text(
        "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS tg_acc (
                id SERIAL PRIMARY KEY,
                username TEXT UNIQUE,
                user_id BIGINT
            )
        """)
    finally:
        await conn.close()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def save_user(username: str, user_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    """
    if not username:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–µ–∑ username
    
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        await conn.execute("""
            INSERT INTO tg_acc (username, user_id) 
            VALUES ($1, $2)
            ON CONFLICT (username) DO NOTHING
        """, username, user_id)
    finally:
        await conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram API
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user = update.effective_user
    await save_user(user.username, user.id)
    print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} ‚Äî {user.id}")

    keyboard = [
        ["üìÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", "üèÜ –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üìå –û –±–æ—Ç–µ"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç –§–°–ü."
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –§–°–ü, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ, –∞ —Ç–∞–∂–µ –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )

async def get_user_competitions(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        competitions = await conn.fetch(
            '''
SELECT wt.name, wc.name, wc.description,
win_competitiondate.start_date, win_competitiondate.end_date,
win_competitiondate.registration_start, win_competitiondate.registration_end, wu.tg_username
from win_team wt
left join win_competition wc
on wt.competition_id = wc.id
LEFT JOIN win_competitiondate
ON wc.id = win_competitiondate.competition_id
left join win_team_members wb
on wt.id = wb.team_id
left join win_userinfo wu
on wb.userinfo_id = wu.id
where wu.tg_username = (select username from tg_acc where user_id = $1);
''', 
            user_id
        )
        return competitions if competitions else None
    finally:
        await conn.close()

async def handle_competitions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram API
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user = update.effective_user
    loading_msg = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π...")
    
    try:
        conn = await asyncpg.connect(**DB_CONFIG)
        user_id = user.id 
        if user_id:
            competitions = await get_user_competitions(user_id)
            
            if competitions:
                response = "üèÜ –¢–≤–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n\n" + "\n".join(
                    f"üî• {comp['name']} ({comp['description']})\n\nüìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {comp['start_date'].strftime("%d.%m.%Y %H:%M")} - {comp['end_date'].strftime("%d.%m.%Y %H:%M")}\n‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {comp['registration_start'].strftime("%d.%m.%Y %H:%M")} - {comp['registration_end'].strftime("%d.%m.%Y %H:%M")}\n\n\n" 
                    for comp in competitions
                )
            else:
                response = 'ü§∑ –¢—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∏ –≤ –∫–∞–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö.\n–°–∫–æ—Ä–µ–µ –∑–∞—Ö–æ–¥–∏ –Ω–∞ <a href="https://www.codedepartament.ru">—Å–∞–π—Ç</a> –∏ —É—á–∞–≤—Å—Ç–≤—É–π!\n'
        else:
            response = "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É /start"
        
        await loading_msg.edit_text(response, parse_mode='HTML')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await loading_msg.edit_text("üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        await conn.close()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é).
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram API
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    text = update.message.text
    if text == "üìÖ –ú–æ–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è":
        await handle_competitions(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text('''
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/cancel - –æ—Ç–º–µ–Ω–∞
/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
''')
    elif text == "üèÜ –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è":
        return await find_competitions_start(update, context)
    elif text == "üìå –û –±–æ—Ç–µ":
        await update.message.reply_text("–ë–æ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã –ê–Ω–∞–ª–∏—Ç–∏–∫!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –§–°–ü, –∞ —Ç–∞–∂–µ –∏—Å–∫–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥ —Å–≤–æ–π —Å–∫–∏–ª–ª.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send (—Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π). (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram API
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    sender_id = update.effective_user.id
    sender_username = update.effective_user.username
    conn = await asyncpg.connect(**DB_CONFIG)
    competitions = False
    try:
        user_id = await conn.fetchval(
            "SELECT user_id FROM tg_acc WHERE username = $1", 
            sender_username
        )
        if user_id and competitions:
            try:
                await context.bot.send_message(chat_id=user_id, text="–ü—Ä–∏–≤–µ—Ç! –¢—ã —É—á–∞–≤—Å—Ç–≤—É–µ—à—å –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö ...")
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sender_username} ({user_id})")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è {sender_username}: {e}")
        else:
            await context.bot.send_message(chat_id=user_id, text="–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–∫–∞ –Ω–∏–≥–¥–µ –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—à—å")
    finally:
        await conn.close()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.
    """
    await init_db()
    app = Application.builder().token("Your_Token").build()
    app.add_handler(CommandHandler("start", start))
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text("üèÜ –ù–∞–π—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"), find_competitions_start)],
        states={
            QUESTION_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_1)],
            QUESTION_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_2)],
            QUESTION_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_3)],
            QUESTION_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_4)],
            QUESTION_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_5)],
            QUESTION_6: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_6)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Text(["–û—Ç–º–µ–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]), cancel)
        ],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("send", broadcast))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.run_polling()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except RuntimeError:
        import nest_asyncio
        nest_asyncio.apply()
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
